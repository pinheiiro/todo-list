import type { NextPage } from 'next';
import Head from 'next/head';
import { getSession } from 'next-auth/react';
import { clientPromise, db } from "./api/database/client";
import { api } from "../services/api";

import { Header } from '../components/posts/header';
import { List } from '../components/posts/list';
import { useQuery } from 'react-query';

const Posts: NextPage = ({user}) => {

    const { isLoading, isSuccess, isError, data } = useQuery('tasks', async () => {
        try {
            const { data } = await api.get(`/posts/${user._id}`);
            return data;
        } catch(err) {
            return err;
        }
    });

    return (
        <div>
            <Head>
                <title>Posts</title>
                <meta name="description" content="Generated by Gabriel" />
                <link rel="icon" href="" />
            </Head>
            <Header user={user}/>
            <h1>Página Posts</h1>

            <main>
                { isLoading && 
                    <div>
                        <h1>Carregando</h1>
                    </div>    
                }
                { isError && 
                    <div>
                        <h1>Não foi possivel carregar as informações</h1>
                    </div>
                }
                { isSuccess &&
                    <List user={user} data={data}/>
                }
            </main>
        </div>
    )
}

export default Posts;


export async function getServerSideProps({ req }) {
    try {
        const session = await getSession({ req });
        if (!session) {
            return {
                redirect: {
                    destination: '/',
                    permanent: false
                }
            }
        }
        clientPromise
        const findUser = await db.collection("users").findOne({email: session.user.email})
        const convert = JSON.stringify(findUser);
        const user = JSON.parse(convert);
        return {
            props: {user}
        }
    } catch(err) {
        return {
            redirect: {
                destination: '/',
                permanent: false
            }
        }
    }
}
  